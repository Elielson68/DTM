// <auto-generated />
using System;
using DTMBackend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DTMBackend.Migrations
{
    [DbContext(typeof(AppDtmContext))]
    [Migration("20210620200249_change_id_exam")]
    partial class change_id_exam
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DTMBackend.Models.ExamDb", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<double>("OpenMeasurementPx")
                        .HasColumnType("double precision");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ReportOpen")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("ReportShut")
                        .HasColumnType("bytea");

                    b.Property<double>("ResultMeasurementCm")
                        .HasColumnType("double precision");

                    b.Property<double>("ShutMeasurementPx")
                        .HasColumnType("double precision");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("ExamId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UsersId");

                    b.ToTable("exam");
                });

            modelBuilder.Entity("DTMBackend.Models.PatientDb", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Age")
                        .HasColumnType("text");

                    b.Property<string>("DocNumber")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<double>("InitialDistance")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PainChoice")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("PatientId");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("DTMBackend.Models.UsersDb", b =>
                {
                    b.Property<int>("UsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("RegisteredNumber")
                        .HasColumnType("text");

                    b.HasKey("UsersId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DTMBackend.Models.ExamDb", b =>
                {
                    b.HasOne("DTMBackend.Models.PatientDb", "Patient")
                        .WithMany("Exams")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTMBackend.Models.UsersDb", "Users")
                        .WithMany("Exams")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DTMBackend.Models.PatientDb", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("DTMBackend.Models.UsersDb", b =>
                {
                    b.Navigation("Exams");
                });
#pragma warning restore 612, 618
        }
    }
}
